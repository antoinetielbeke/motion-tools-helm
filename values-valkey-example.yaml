# Example configuration for Motion Tools with integrated Valkey caching
# Valkey is a Redis-compatible in-memory data store that provides caching capabilities

# Basic configuration with Valkey enabled
motionTools:
  # Enable Valkey caching in the application
  valkey:
    enabled: true
    # Host will be auto-configured when using integrated Valkey
    # If using external Valkey, specify the host here
    # host: "external-valkey.example.com"
    port: 6379
    database: 0
    # Password will be auto-generated or use the one from integrated Valkey
    # For external Valkey, specify password or use existingSecret
    # password: "your-valkey-password"
    # existingSecret: "valkey-credentials"
    # secretKey: "password"

# Integrated Valkey deployment configuration
valkey:
  enabled: true
  
  # Authentication settings
  auth:
    enabled: true
    password: "changeme-in-production"
    # For production, use an existing secret:
    # existingSecret: "valkey-auth"
    # existingSecretPasswordKey: "valkey-password"
  
  # Architecture: standalone or replication
  architecture: standalone
  
  # Master node configuration
  master:
    persistence:
      enabled: true
      size: 8Gi
      # Specify storage class if needed
      # storageClass: "fast-ssd"
    
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 250m
    
    # Additional master configuration
    extraFlags:
      - "--maxmemory 400mb"
      - "--maxmemory-policy allkeys-lru"
  
  # Enable metrics for monitoring (optional)
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false

# Example for high-availability setup with replication
valkey-ha:
  enabled: true
  
  auth:
    enabled: true
    existingSecret: "valkey-credentials"
  
  # Use replication for high availability
  architecture: replication
  
  master:
    persistence:
      enabled: true
      size: 16Gi
      storageClass: "fast-ssd"
    
    resources:
      limits:
        memory: 1Gi
        cpu: 1000m
      requests:
        memory: 512Mi
        cpu: 500m
  
  replica:
    # Number of replica nodes
    replicaCount: 2
    
    persistence:
      enabled: true
      size: 16Gi
      storageClass: "fast-ssd"
    
    resources:
      limits:
        memory: 1Gi
        cpu: 1000m
      requests:
        memory: 512Mi
        cpu: 500m
    
    # Pod anti-affinity to spread replicas across nodes
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: replica
              topologyKey: kubernetes.io/hostname
  
  sentinel:
    enabled: true
    quorum: 2
    
    resources:
      limits:
        memory: 256Mi
        cpu: 250m
      requests:
        memory: 128Mi
        cpu: 100m
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s

# Example with external Valkey instance
external-valkey:
  motionTools:
    valkey:
      enabled: true
      host: "valkey.cache.amazonaws.com"
      port: 6379
      database: 0
      existingSecret: "external-valkey-auth"
      secretKey: "password"
  
  # Disable integrated Valkey when using external
  valkey:
    enabled: false

# Example with Valkey for specific use cases
production-with-valkey:
  motionTools:
    apacheFqdn: "motion.example.com"
    
    # Enable Valkey for caching
    valkey:
      enabled: true
      database: 0
    
    # Configure PHP to work well with caching
    php:
      memoryLimit: "512M"
      maxExecutionTime: "300"
    
    # Background jobs can leverage caching
    backgroundJobs:
      enabled: true
      notifications: true
  
  # Valkey configuration optimized for Motion Tools
  valkey:
    enabled: true
    
    auth:
      enabled: true
      existingSecret: "valkey-auth"
    
    master:
      persistence:
        enabled: true
        size: 20Gi
        storageClass: "fast-ssd"
      
      resources:
        limits:
          memory: 2Gi
          cpu: 1000m
        requests:
          memory: 1Gi
          cpu: 500m
      
      # Configuration for Motion Tools workload
      extraFlags:
        - "--maxmemory 1800mb"
        - "--maxmemory-policy allkeys-lru"
        - "--timeout 300"
        - "--tcp-keepalive 60"
        - "--tcp-backlog 511"
        - "--databases 16"
      
      # Additional Redis/Valkey compatible configurations
      extraEnvVars:
        - name: VALKEY_AOF_ENABLED
          value: "yes"
        - name: VALKEY_AOF_FSYNC
          value: "everysec"

# Minimal setup for testing
test-valkey:
  motionTools:
    valkey:
      enabled: true
  
  valkey:
    enabled: true
    auth:
      enabled: false  # Disable auth for testing
    master:
      persistence:
        enabled: false  # No persistence for testing
      resources:
        limits:
          memory: 128Mi
          cpu: 100m
        requests:
          memory: 64Mi
          cpu: 50m

# Notes:
# 1. Valkey is fully compatible with Redis clients and protocols
# 2. The Motion Tools application uses Redis protocol to communicate with Valkey
# 3. Valkey 7 provides performance improvements over Redis 6.x
# 4. For production, always use:
#    - Authentication with strong passwords or secrets
#    - Persistent storage
#    - Appropriate resource limits
#    - Monitoring/metrics
# 5. Consider using replication for high-availability scenarios
# 6. The maxmemory-policy 'allkeys-lru' is recommended for cache workloads